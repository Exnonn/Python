import turtle
import math

def fractal(aturt, depth, maxdepth):
    if depth > maxdepth:
        return
    length = 180 * ((math.sqrt(2) / 2) ** depth)
    
    # Set color based on depth
    colors = ["green", "brown", "red", "orange", "blue", "purple"]
    aturt.color(colors[depth % len(colors)])

    anotherturt = aturt.clone()
    aturt.forward(length)
    aturt.left(45)
    fractal(aturt, depth + 1, maxdepth)
    anotherturt.right(90)
    anotherturt.forward(length)
    anotherturt.left(90)
    anotherturt.forward(length)

    if depth != maxdepth:
        turt3 = anotherturt.clone()
        turt3.left(45)
        turt3.forward(180 * ((math.sqrt(2) / 2) ** (1 + depth)))
        turt3.right(90)
        fractal(turt3, depth + 1, maxdepth)

    anotherturt.left(90)
    anotherturt.forward(length)

def drawApple(turt, size):
    turt.penup()
    turt.goto(turt.xcor() + size, turt.ycor() - size)
    turt.pendown()

    # Draw the apple body
    turt.color("red")
    turt.begin_fill()
    turt.circle(size)
    turt.end_fill()

    # Draw the apple stem
    turt.penup()
    turt.goto(turt.xcor() - size / 4, turt.ycor())
    turt.pendown()
    turt.width(size / 10)  # Set the stem thickness

    turt.left(90)
    turt.forward(size / 2)
    turt.backward(size / 2)
    turt.right(90)
    turt.forward(size / 2)
    turt.backward(size / 2)

def draw_fractal():
    window = turtle.Screen()
    window.tracer(0, 0)  # Turn off animation
    turt = turtle.Turtle()
    turt.hideturtle()
    turt.penup()
    turt.goto(-75, -225)
    turt.pendown()
    turt.speed(0)
    turt.left(90)

    fractal(turt, 1, 11)  # Reduced the maximum depth

    # Draw the apple beside the fractal tree
    drawApple(turt, 20)

    window.update()
    window.exitonclick()

draw_fractal()
